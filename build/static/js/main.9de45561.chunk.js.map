{"version":3,"sources":["web3.js","lottery.js","App.js","serviceWorker.js","index.js"],"names":["_ref","Object","asyncToGenerator","regenerator_default","a","mark","_callee","wrap","_context","prev","next","window","web3","currentProvider","enable","stop","apply","this","arguments","getProvider","Web3","lottery","eth","Contract","constant","inputs","name","outputs","type","payable","stateMutability","App","state","manager","players","balance","value","message","onSubmit","event","accounts","preventDefault","getAccounts","sent","_this","setState","methods","enter","send","from","utils","toWei","onClick","_callee2","_context2","pickWinner","call","getPlayers","getBalance","options","address","_this2","react_default","createElement","style","width","height","length","fromWei","onChange","target","Component","Boolean","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.9de45561.chunk.js","sourcesContent":["import Web3 from 'web3';\n\nconst getProvider = async () => {\n\tawait window.web3.currentProvider.enable() // request authentication\n};\ngetProvider();\n\nconst web3 = new Web3(window.web3.currentProvider);\n\nexport default web3;","import web3 from './web3';\n\nconst address = '0x3E4E1B3c562C20C3d78767a6269629Fdc2c970a9';\n\nconst abi = \n[{\"constant\":true,\"inputs\":[],\"name\":\"manager\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"pickWinner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getPlayers\",\"outputs\":[{\"name\":\"\",\"type\":\"address[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"enter\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"players\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"}];\n\nexport default new web3.eth.Contract(abi, address);\n\n","import React, { Component } from 'react';\nimport './App.css';\nimport web3 from './web3';\nimport lottery from './lottery';\n\nclass App extends Component {\n  state = {\n    manager: '',\n    players: [],\n    balance: '',\n    value: '',\n    message: ''\n  };\n\n  async componentDidMount() {\n    const manager = await lottery.methods.manager().call();\n    const players = await lottery.methods.getPlayers().call();\n    const balance = await web3.eth.getBalance(lottery.options.address);\n\n    this.setState({ manager, players, balance });\n  }\n\n  onSubmit = async (event) => {\n    event.preventDefault();\n\n    const accounts = await web3.eth.getAccounts();\n\n    this.setState({ message: 'Waiting on transaction success...' });\n\n    await lottery.methods.enter().send({\n      from: accounts[0],\n      value: web3.utils.toWei(this.state.value, 'ether')\n    });\n\n    this.setState({ message: 'You have been entered!' });\n  };\n\n  onClick = async () => {\n    const accounts = await web3.eth.getAccounts();\n\n    this.setState({ message: 'Waiting on transaction success' });\n\n    await lottery.methods.pickWinner().send({\n      from: accounts[0]\n    });\n\n    this.setState({ message: 'A winner has been picked!' });\n  };\n\n  render() {\n    return (\n      <div style={{ width: 500, height: 50}}>\n        <h2>Lottery Contract</h2>\n        <p>\n          This contract is managed by {this.state.manager}.\n          There are currently {this.state.players.length} people entered competing\n          to win {web3.utils.fromWei(this.state.balance, 'ether')} ether(s)!\n          </p>\n\n          <hr />\n\n          <form onSubmit={this.onSubmit}>\n            <h4>Want to try your luck?</h4>\n            <div>\n              <label>Amount of ether(s) to enter</label>\n              <input\n              value={this.state.value}\n                onChange={event => this.setState({ value: event.target.value })}\n              />\n            </div>\n            <button>Enter</button>\n          </form>\n\n          <hr />\n          <h4>Ready to pick a winner?</h4>\n          <button onClick={this.onClick}>Pick a winner!</button>\n\n          <hr />\n\n          <h1>{this.state.message}</h1>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}